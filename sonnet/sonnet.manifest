{
  "$schema": "http://inqlude.org/schema/generic-manifest-v1#",
  "name": "sonnet",
  "display_name": "Sonnet",
  "summary": "Multi-language spell checker",
  "urls": {
    "homepage": "https://projects.kde.org/projects/frameworks/sonnet",
    "vcs": null,
    "mailing_list": null
  },
  "licenses": [
    "LGPLv2.1+"
  ],
  "description": "\nThis is KSpell 2 beta implementation. KSpell 2 is completely in\nprocess and is plugin based.\n\nThe main class in the KSpell 2 is the KSpell::Loader. Loader is\nresponsible for loading all the plugins and creating the actual\ndictionaries.\n\nDictionaries are abstracted in the KSpell::Dictionary object which\nencapsulates all spell-checking functionality.\n\nYou'll notice that the Loader is being created via the \n`Loader::Ptr Loader::openLoader( KSharedConfig *config =0 );`\ncall. The Loader is a shared object and the reason for this construct\nis very simple:\n\n- most application would need to have a few Loader objects (one for\nthe dialog dictionaries, one for the background spell checking, one\nfor the suggestion dictionaries) and because Loader loads plugins on\ncreation it would be ineffective to have a few redundant Loader\nobjects in one application,\n\n- each Loader maps to a configuration file. If one Loader would change\nin the application, all others would have to reparse and repopulate\nthe options, which would be really inefficient.\n\nDue to the above you deal with the loader via the Loader::Ptr\ninterface.\n\nOnce you have the Loader object in your application, you can ask it\nfor a Dictionary of some language. If such a dictionary is available\nyou get it back as a Dictionary class and you use that class to do the\nactual spell checking.\n\nLoader on construction checks for available KSpell::Client's which are\nloaded as dynamic plugins. It's the actual KSpell::Client that gives\nthe loader the KSpell::Dictionary.\nOne can specify a default client and the default language for a Loader\ntheough the settings() method and the KSpell::Settings class which it\nreturns.\n\nAlso note that you can have dictionaries for multiple languages in\nyour application.\nAnd most importantly the interface to KSpell::Dictionary is\nsynchronous so once you pass a word to check you don't have to wait\nfor any signals - you get corrections right back.\n\nSample usage of KSpell 2 looks like follows:\n\n    #include <kspell_loader.h>\n    #include <kspell_dictionary.h>\n    using namespace KSpell;\n\n\n    Loader::Ptr loader = Loader::openLoader( someKSettingsObject );\n    Dictionary *enDict = loader->dictionary( \"en_US\" );\n    Dictionary *deDict = loader->dictionary( \"de_DE\" );\n\n    void someFunc( const QString& word )\n    {\n        if ( enDict->check( word ) ) {\n            qDebug()<<\"Word \\\"\"<<word<<\"\\\" is misspelled.\";\n            QStringList suggestion = enDict->suggest( word );\t\n            qDebug()<<\"Suggestions: \"<< suggestions;\n        }\n\n        QStringList suggestions;\n        if ( deDict->checkAndSuggest( word, suggestions ) ) {\n           qDebug()<<\"Wort \\\"\"<<word<<\"\\\" ist fehlbuchstabiert.\";\n           qDebug()<<\"Vorschlage: \"<< suggestions;\n        }\n    }\n\n    delete enDict;\n    delete deDict;\n\n",
  "authors": [
    "The KDE Community"
  ],
  "platforms": [
    "Linux"
  ],
  "group": "kde-frameworks"
}
